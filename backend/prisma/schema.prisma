datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  CURATOR
  ADMIN
}

enum GeneratorAccessMode {
  ADMIN_ONLY
  MEMBERS
}

enum ModerationStatus {
  ACTIVE
  FLAGGED
  REMOVED
}

enum ModerationEntityType {
  MODEL
  IMAGE
}

enum ModerationActionType {
  FLAGGED
  APPROVED
  REMOVED
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  displayName String
  role        UserRole     @default(USER)
  bio         String?
  avatarUrl   String?
  passwordHash String      @default("")
  isActive    Boolean      @default(true)
  showAdultContent Boolean @default(false)
  lastLoginAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  galleries   Gallery[]    @relation("GalleryOwner")
  assets      ModelAsset[] @relation("AssetOwner")
  images      ImageAsset[] @relation("ImageOwner")
  imageLikes ImageLike[]
  modelComments ModelComment[]
  modelCommentLikes ModelCommentLike[]
  imageComments ImageComment[]
  imageCommentLikes ImageCommentLike[]
  uploadDrafts UploadDraft[]
  rankingState UserRankingState?
  generatorRequests GeneratorRequest[]
  flaggedModels ModelAsset[] @relation("ModelAssetFlagger")
  flaggedImages ImageAsset[] @relation("ImageAssetFlagger")
  moderationActions ModerationLog[] @relation("ModerationLogActor")
  moderationNotices ModerationLog[] @relation("ModerationLogRecipient")
  modelModerationReports ModelModerationReport[]
  imageModerationReports ImageModerationReport[]
}

model Gallery {
  id          String         @id @default(cuid())
  slug        String         @unique
  title       String
  description String?
  coverImage  String?
  isPublic    Boolean        @default(true)
  ownerId     String
  owner       User           @relation("GalleryOwner", fields: [ownerId], references: [id])
  entries     GalleryEntry[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ModelAsset {
  id           String       @id @default(cuid())
  slug         String       @unique
  title        String
  description  String?
  trigger      String?
  version      String
  fileSize     Int?
  checksum     String?
  storagePath  String       @unique
  previewImage String?
  metadata     Json?
  isPublic     Boolean      @default(true)
  isAdult      Boolean      @default(false)
  ownerId      String
  owner        User         @relation("AssetOwner", fields: [ownerId], references: [id])
  tags         AssetTag[]
  galleryItems GalleryEntry[] @relation("GalleryModel")
  versions     ModelVersion[]
  comments     ModelComment[]
  generatorRequests GeneratorRequest[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  moderationStatus ModerationStatus @default(ACTIVE)
  flaggedAt    DateTime?
  flaggedById  String?
  flaggedBy    User?        @relation("ModelAssetFlagger", fields: [flaggedById], references: [id])
  moderationReports ModelModerationReport[]
}

model ModelVersion {
  id           String      @id @default(cuid())
  modelId      String
  model        ModelAsset  @relation(fields: [modelId], references: [id])
  version      String
  storagePath  String      @unique
  previewImage String?
  metadata     Json?
  fileSize     Int?
  checksum     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([modelId, version])
}

model ImageAsset {
  id             String         @id @default(cuid())
  title          String
  description    String?
  width          Int?
  height         Int?
  fileSize       Int?
  storagePath    String         @unique
  prompt         String?
  negativePrompt String?
  seed           String?
  model          String?
  sampler        String?
  cfgScale       Float?
  steps          Int?
  tags           ImageTag[]
  isPublic       Boolean        @default(true)
  isAdult        Boolean        @default(false)
  galleries      GalleryEntry[] @relation("GalleryImage")
  ownerId        String
  owner          User           @relation("ImageOwner", fields: [ownerId], references: [id])
  likes          ImageLike[]
  comments       ImageComment[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  moderationStatus ModerationStatus @default(ACTIVE)
  flaggedAt      DateTime?
  flaggedById    String?
  flaggedBy      User?           @relation("ImageAssetFlagger", fields: [flaggedById], references: [id])
  moderationReports ImageModerationReport[]
}

model ImageLike {
  userId    String
  imageId   String
  createdAt DateTime @default(now())

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  image ImageAsset @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([userId, imageId])
  @@index([imageId])
}

model ModelComment {
  id        String   @id @default(cuid())
  modelId   String
  model     ModelAsset @relation(fields: [modelId], references: [id], onDelete: Cascade)
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String
  likes     ModelCommentLike[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([modelId])
}

model ModelCommentLike {
  commentId String
  userId    String
  createdAt DateTime @default(now())

  comment ModelComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([commentId, userId])
  @@index([userId])
}

model ImageComment {
  id        String   @id @default(cuid())
  imageId   String
  image     ImageAsset @relation(fields: [imageId], references: [id], onDelete: Cascade)
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String
  likes     ImageCommentLike[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([imageId])
}

model ImageCommentLike {
  commentId String
  userId    String
  createdAt DateTime @default(now())

  comment ImageComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([commentId, userId])
  @@index([userId])
}

model GalleryEntry {
  id        String   @id @default(cuid())
  galleryId String
  imageId   String?
  assetId   String?
  position  Int      @default(0)
  note      String?
  createdAt DateTime @default(now())
  gallery   Gallery  @relation(fields: [galleryId], references: [id])
  image     ImageAsset? @relation("GalleryImage", fields: [imageId], references: [id])
  asset     ModelAsset? @relation("GalleryModel", fields: [assetId], references: [id])
}

model Tag {
  id        String     @id @default(cuid())
  label     String     @unique
  category  String?
  isAdult   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  imageTags ImageTag[]
  assetTags AssetTag[]
}

model ImageTag {
  imageId String
  tagId   String
  image   ImageAsset @relation(fields: [imageId], references: [id])
  tag     Tag        @relation(fields: [tagId], references: [id])

  @@id([imageId, tagId])
}

model AssetTag {
  assetId String
  tagId   String
  asset   ModelAsset @relation(fields: [assetId], references: [id])
  tag     Tag        @relation(fields: [tagId], references: [id])

  @@id([assetId, tagId])
}

model StorageObject {
  id           String   @id
  bucket       String
  objectName   String
  originalName String?
  contentType  String?
  size         BigInt?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([bucket, objectName])
}

model UploadDraft {
  id            String   @id @default(cuid())
  assetType     String
  title         String
  description   String?
  visibility    String
  category      String?
  galleryMode   String
  targetGallery String?
  tags          Json
  files         Json
  fileCount     Int
  totalSize     BigInt
  status        String   @default("queued")
  ownerId       String
  owner         User     @relation(fields: [ownerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RankingSettings {
  id            Int      @id @default(autoincrement())
  modelWeight   Int      @default(3)
  galleryWeight Int      @default(2)
  imageWeight   Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GeneratorSettings {
  id         Int                  @id @default(autoincrement())
  accessMode GeneratorAccessMode  @default(ADMIN_ONLY)
  baseModels Json                 @default("[]")
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
}

model GeneratorRequest {
  id             String                @id @default(cuid())
  userId         String
  baseModelId    String?
  baseModelSelections Json?
  prompt         String
  negativePrompt String?
  seed           String?
  guidanceScale  Float?
  steps          Int?
  width          Int
  height         Int
  loraSelections Json?
  status         String               @default("draft")
  errorReason    String?
  outputBucket   String?
  outputPrefix   String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  baseModel ModelAsset? @relation(fields: [baseModelId], references: [id])
  artifacts GeneratorArtifact[]
}

model GeneratorArtifact {
  id          String   @id @default(cuid())
  requestId   String
  bucket      String
  objectKey   String
  storagePath String
  createdAt   DateTime @default(now())

  request GeneratorRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
}

model ModerationLog {
  id            String                 @id @default(cuid())
  entityType    ModerationEntityType
  entityId      String
  action        ModerationActionType
  message       String?
  actorId       String?
  actor         User?                  @relation("ModerationLogActor", fields: [actorId], references: [id])
  targetUserId  String?
  targetUser    User?                  @relation("ModerationLogRecipient", fields: [targetUserId], references: [id])
  createdAt     DateTime               @default(now())
  @@index([entityType, entityId])
}

model ModelModerationReport {
  id         String   @id @default(cuid())
  modelId    String
  reporterId String
  reason     String?
  createdAt  DateTime @default(now())

  model    ModelAsset @relation(fields: [modelId], references: [id], onDelete: Cascade)
  reporter User       @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([modelId])
}

model ImageModerationReport {
  id         String   @id @default(cuid())
  imageId    String
  reporterId String
  reason     String?
  createdAt  DateTime @default(now())

  image    ImageAsset @relation(fields: [imageId], references: [id], onDelete: Cascade)
  reporter User       @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([imageId])
}

model RankTier {
  id           String   @id @default(cuid())
  label        String
  description  String
  minimumScore Int
  position     Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([minimumScore])
}

model UserRankingState {
  userId      String   @id
  scoreOffset Int      @default(0)
  isExcluded  Boolean  @default(false)
  lastResetAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model AdultSafetyKeyword {
  id        String   @id @default(cuid())
  label     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
