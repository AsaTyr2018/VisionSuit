datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  CURATOR
  ADMIN
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  displayName String
  role        UserRole     @default(USER)
  bio         String?
  avatarUrl   String?
  passwordHash String      @default("")
  isActive    Boolean      @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  galleries   Gallery[]    @relation("GalleryOwner")
  assets      ModelAsset[] @relation("AssetOwner")
  images      ImageAsset[] @relation("ImageOwner")
  imageLikes ImageLike[]
  uploadDrafts UploadDraft[]
  rankingState UserRankingState?
}

model Gallery {
  id          String         @id @default(cuid())
  slug        String         @unique
  title       String
  description String?
  coverImage  String?
  isPublic    Boolean        @default(true)
  ownerId     String
  owner       User           @relation("GalleryOwner", fields: [ownerId], references: [id])
  entries     GalleryEntry[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ModelAsset {
  id           String       @id @default(cuid())
  slug         String       @unique
  title        String
  description  String?
  trigger      String?
  version      String
  fileSize     Int?
  checksum     String?
  storagePath  String       @unique
  previewImage String?
  metadata     Json?
  isPublic     Boolean      @default(true)
  ownerId      String
  owner        User         @relation("AssetOwner", fields: [ownerId], references: [id])
  tags         AssetTag[]
  galleryItems GalleryEntry[] @relation("GalleryModel")
  versions     ModelVersion[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model ModelVersion {
  id           String      @id @default(cuid())
  modelId      String
  model        ModelAsset  @relation(fields: [modelId], references: [id])
  version      String
  storagePath  String      @unique
  previewImage String?
  metadata     Json?
  fileSize     Int?
  checksum     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([modelId, version])
}

model ImageAsset {
  id             String         @id @default(cuid())
  title          String
  description    String?
  width          Int?
  height         Int?
  fileSize       Int?
  storagePath    String         @unique
  prompt         String?
  negativePrompt String?
  seed           String?
  model          String?
  sampler        String?
  cfgScale       Float?
  steps          Int?
  tags           ImageTag[]
  isPublic       Boolean        @default(true)
  galleries      GalleryEntry[] @relation("GalleryImage")
  ownerId        String
  owner          User           @relation("ImageOwner", fields: [ownerId], references: [id])
  likes          ImageLike[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model ImageLike {
  userId    String
  imageId   String
  createdAt DateTime @default(now())

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  image ImageAsset @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([userId, imageId])
  @@index([imageId])
}

model GalleryEntry {
  id        String   @id @default(cuid())
  galleryId String
  imageId   String?
  assetId   String?
  position  Int      @default(0)
  note      String?
  createdAt DateTime @default(now())
  gallery   Gallery  @relation(fields: [galleryId], references: [id])
  image     ImageAsset? @relation("GalleryImage", fields: [imageId], references: [id])
  asset     ModelAsset? @relation("GalleryModel", fields: [assetId], references: [id])
}

model Tag {
  id        String     @id @default(cuid())
  label     String     @unique
  category  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  imageTags ImageTag[]
  assetTags AssetTag[]
}

model ImageTag {
  imageId String
  tagId   String
  image   ImageAsset @relation(fields: [imageId], references: [id])
  tag     Tag        @relation(fields: [tagId], references: [id])

  @@id([imageId, tagId])
}

model AssetTag {
  assetId String
  tagId   String
  asset   ModelAsset @relation(fields: [assetId], references: [id])
  tag     Tag        @relation(fields: [tagId], references: [id])

  @@id([assetId, tagId])
}

model StorageObject {
  id           String   @id
  bucket       String
  objectName   String
  originalName String?
  contentType  String?
  size         BigInt?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([bucket, objectName])
}

model UploadDraft {
  id            String   @id @default(cuid())
  assetType     String
  title         String
  description   String?
  visibility    String
  category      String?
  galleryMode   String
  targetGallery String?
  tags          Json
  files         Json
  fileCount     Int
  totalSize     BigInt
  status        String   @default("queued")
  ownerId       String
  owner         User     @relation(fields: [ownerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RankingSettings {
  id            Int      @id @default(autoincrement())
  modelWeight   Int      @default(3)
  galleryWeight Int      @default(2)
  imageWeight   Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RankTier {
  id           String   @id @default(cuid())
  label        String
  description  String
  minimumScore Int
  position     Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([minimumScore])
}

model UserRankingState {
  userId      String   @id
  scoreOffset Int      @default(0)
  isExcluded  Boolean  @default(false)
  lastResetAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}
