#!/usr/bin/env bash
set -euo pipefail

# VisionSuit PostgreSQL migration preflight agent.
#
# The preflight stage consumes the vs-conf.txt bundle generated by the remote
# postgress-prepare.sh script. It verifies SSH connectivity, confirms the target
# PostgreSQL database is reachable, and writes a `.env-migration` file in the
# repository root that downstream migration helpers consume.

CONFIG_FILE=""
ENV_MIGRATION_FILE=".env-migration"
SSH_KEY_PATH="config/migration-ssh-key"
SQLITE_PATH="backend/prisma/dev.db"

usage() {
  cat <<USAGE
Usage: $0 --config /root/config/vs-conf.txt [--sqlite backend/prisma/dev.db]

Options:
  --config <path>    Path to the configuration bundle copied from the target host (required)
  --sqlite <path>    Path to the source SQLite database (default: backend/prisma/dev.db)
  --env <path>       Destination for the generated migration env file (default: ./.env-migration)
  --ssh-key <path>   Where to write the extracted SSH private key (default: config/migration-ssh-key)
  -h, --help         Show this help message
USAGE
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --config)
      CONFIG_FILE="$2"
      shift 2
      ;;
    --sqlite)
      SQLITE_PATH="$2"
      shift 2
      ;;
    --env)
      ENV_MIGRATION_FILE="$2"
      shift 2
      ;;
    --ssh-key)
      SSH_KEY_PATH="$2"
      shift 2
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      echo "[preflight] Unknown option: $1" >&2
      usage
      exit 1
      ;;
  esac
done

if [[ -z "$CONFIG_FILE" ]]; then
  echo "[preflight] --config is required." >&2
  usage
  exit 1
fi

if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "[preflight] Configuration file '$CONFIG_FILE' not found." >&2
  exit 1
fi

mkdir -p "$(dirname "$SSH_KEY_PATH")"

parse_conf() {
  local key="$1"
  awk -F'=' -v "k=$key" '$1==k {print substr($0, index($0,"=")+1)}' "$CONFIG_FILE"
}

SSH_HOST="$(parse_conf SSH_HOST)"
SSH_PORT="$(parse_conf SSH_PORT)"
SSH_USER="$(parse_conf SSH_USER)"
SSH_KEY_B64="$(parse_conf SSH_PRIVATE_KEY_BASE64)"
POSTGRES_HOST="$(parse_conf POSTGRES_HOST)"
POSTGRES_PORT="$(parse_conf POSTGRES_PORT)"
POSTGRES_DB="$(parse_conf POSTGRES_DB)"
POSTGRES_USER="$(parse_conf POSTGRES_USER)"
POSTGRES_PASSWORD="$(parse_conf POSTGRES_PASSWORD)"
POSTGRES_SUPERUSER="$(parse_conf POSTGRES_SUPERUSER)"
POSTGRES_INTERNAL_HOST="$(parse_conf POSTGRES_INTERNAL_HOST)"

for key in SSH_HOST SSH_PORT SSH_USER SSH_KEY_B64 POSTGRES_HOST POSTGRES_PORT POSTGRES_DB POSTGRES_USER POSTGRES_PASSWORD POSTGRES_SUPERUSER POSTGRES_INTERNAL_HOST; do
  if [[ -z "${!key:-}" ]]; then
    echo "[preflight] Missing required value for $key in ${CONFIG_FILE}." >&2
    exit 1
  fi
done

if ! [[ "$SSH_PORT" =~ ^[0-9]+$ ]]; then
  echo "[preflight] SSH_PORT must be numeric." >&2
  exit 1
fi

echo "$SSH_KEY_B64" | base64 -d >"$SSH_KEY_PATH"
chmod 600 "$SSH_KEY_PATH"

log() {
  printf '[preflight] %s\n' "$1"
}

log "Checking SSH connectivity to ${SSH_USER}@${SSH_HOST}:${SSH_PORT}."
if ! ssh -i "$SSH_KEY_PATH" -p "$SSH_PORT" -o BatchMode=yes -o StrictHostKeyChecking=accept-new \
  "${SSH_USER}@${SSH_HOST}" 'echo preflight-ok' >/dev/null; then
  echo "[preflight] SSH connectivity test failed." >&2
  exit 1
fi

log "Validating PostgreSQL connection from target host via SSH tunnel."

if ! command -v psql >/dev/null 2>&1; then
  echo "[preflight] psql CLI is required locally to finish preflight." >&2
  exit 1
fi

if ! command -v python3 >/dev/null 2>&1; then
  echo "[preflight] python3 is required to allocate a tunnel port." >&2
  exit 1
fi

# Use SSH tunnel to reach remote PostgreSQL securely.
TUNNEL_PORT="${POSTGRES_PORT}"
if command -v lsof >/dev/null 2>&1 && lsof -Pi :"$TUNNEL_PORT" -sTCP:LISTEN >/dev/null 2>&1; then
  TUNNEL_PORT=$(python3 - <<'PY'
import socket
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind(('127.0.0.1', 0))
    print(s.getsockname()[1])
PY
)
fi

SSH_CMD=(ssh -i "$SSH_KEY_PATH" -p "$SSH_PORT" -o BatchMode=yes -o StrictHostKeyChecking=accept-new)
"${SSH_CMD[@]}" -fN -L "${TUNNEL_PORT}:${POSTGRES_INTERNAL_HOST}:${POSTGRES_PORT}" "${SSH_USER}@${SSH_HOST}"
SSH_TUNNEL_PID=$!
trap 'kill "$SSH_TUNNEL_PID" 2>/dev/null || true' EXIT
sleep 1

PGPASSWORD="$POSTGRES_PASSWORD" psql "postgresql://${POSTGRES_USER}@127.0.0.1:${TUNNEL_PORT}/${POSTGRES_DB}?sslmode=disable" \
  --set ON_ERROR_STOP=1 --quiet --command "SELECT 1" >/dev/null

log "PostgreSQL connectivity confirmed."

cat >"$ENV_MIGRATION_FILE" <<ENV
# Autogenerated by scripts/postgres-migration/preflight.sh
SQLITE_PATH=${SQLITE_PATH}
POSTGRES_SSH_HOST=${SSH_HOST}
POSTGRES_SSH_PORT=${SSH_PORT}
POSTGRES_SSH_USER=${SSH_USER}
POSTGRES_SSH_KEY=${SSH_KEY_PATH}
POSTGRES_HOST=${POSTGRES_HOST}
POSTGRES_PORT=${POSTGRES_PORT}
POSTGRES_DB=${POSTGRES_DB}
POSTGRES_USER=${POSTGRES_USER}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_SUPERUSER=${POSTGRES_SUPERUSER}
POSTGRES_INTERNAL_HOST=${POSTGRES_INTERNAL_HOST}
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
ENV

chmod 600 "$ENV_MIGRATION_FILE"
log "Migration environment written to ${ENV_MIGRATION_FILE}."
log "Preflight successful."

